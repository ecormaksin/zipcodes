buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java-library'
	id 'org.springframework.boot' version "${springBoot}"
	id 'io.spring.dependency-management' version "${dependencyManagement}"
	id "io.freefair.lombok" version "${lombokPluginVersion}"
}

allprojects {
	group = 'com.example.zipcodes'
	version = '0.0.1-SNAPSHOT'

	apply plugin: 'java'

	sourceCompatibility = JavaVersion.VERSION_1_8
}

subprojects {

	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'io.freefair.lombok'
	apply plugin: 'java-library'

	sourceSets {
		main {
			java {
				srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated/sources/annotationProcessor/java/main"]
			}
		}
	}

	configurations {
		developmentOnly
		runtimeClasspath {
			extendsFrom developmentOnly
		}
		compileOnly {
			extendsFrom annotationProcessor
		}
		testAnnotationProcessor {
			extendsFrom annotationProcessor
		}
		testImplementation {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation (
			'org.springframework.boot:spring-boot-starter',
			"javax.validation:validation-api:${validationApiVersion}",
			"org.glassfish:javax.el:${javaxElVersion}",
			"org.mapstruct:mapstruct:${mapStructVersion}"
		)
		runtimeOnly (
			"org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
		)
		annotationProcessor (
			"org.mapstruct:mapstruct-processor:${mapStructVersion}"
		)
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}

	compileJava {
		options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.suppressGeneratorVersionInfoComment=true',
			'-Amapstruct.defaultComponentModel=spring'
		]
	}

	test {
		useJUnitPlatform()
	}
}

configure(subprojects - project(":domain")) {
    dependencies {
		implementation (
			'org.springframework.cloud:spring-cloud-starter-vault-config'
		)
    }

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}
}

project(":domain") {

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

project(":infra") {
	dependencies {
		api (
			project(":domain"),
			"com.querydsl:querydsl-jpa:${queryDslVersion}"
		)
		implementation ("com.querydsl:querydsl-sql:${queryDslVersion}") {
			exclude group: 'joda-time', module: 'joda-time'
		}
		implementation (
			'org.springframework.boot:spring-boot-starter-data-jpa',
			"org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:${log4jdbcLog4j2Jdbc41Version}",
			"com.querydsl:querydsl-apt:${queryDslVersion}",
			"com.querydsl:querydsl-jpa:${queryDslVersion}",
			"joda-time:joda-time:${jodaTimeVersion}",
			'com.ibm.icu:icu4j:67.1'
		)
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly files(
			'libs/ojdbc8.jar',
			'libs/ucp.jar',
			'libs/oraclepki.jar',
			'libs/osdt_core.jar',
			'libs/osdt_cert.jar'
		)
		annotationProcessor (
			'org.springframework.boot:spring-boot-configuration-processor',
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
		)
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

project(":ui") {
	dependencies {
		implementation (
			'org.springframework.boot:spring-boot-starter-web',
			"com.fasterxml.jackson.core:jackson-databind:${jacksonBindVersion}"
		)
		api (
			project(":domain"),
			project(":infra")
		)
	}

	bootJar {
		archiveFileName = "zipcodes.jar"
		enabled = true
	}
}

bootJar {
	enabled = false
}
